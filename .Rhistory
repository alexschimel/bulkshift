#BoF tests
library(raster)
matthew <- raster("D:/Documents/ArcGIS/fundy/backscatter/claire/snapped/by_ben/working/matthew07_0809_mean.tif")
creed <- raster("D:/Documents/ArcGIS/fundy/backscatter/claire/snapped/by_ben/working/creed06_0708_mean.tif")
bathy <- raster("D:/Documents/ArcGIS/fundy/backscatter/claire/snapped/for_ben/Snapped Rasters/Bathymetry_50m.tif")
bs <- bulkshift(creed, matthew, bathy)
#bathy <- project(bathy, matthew)
system.time(
bs <- bulkshift(creed, matthew, bathy, mosaic=TRUE, err.plots = FALSE, dist.plots = FALSE)
)
windows()
plot(bs$mosaic)
bs$model
bs$fit_stats
system.time(
bs <- bulkshift(creed, matthew, bathy, mosaic=TRUE, err.plots = FALSE, dist.plots = FALSE)
)
rm(bs)
system.time(
bs <- bulkshift(creed, matthew, bathy, mosaic=TRUE, err.plots = FALSE, dist.plots = FALSE)
)
bs$mosaic
mean(bs$mosaic)
cellStats(bs$mosaic)
cellStats(bs$mosaic, mean)
#BoF tests
library(raster)
source('D:/Documents/R/functions/bulkshift.R')
matthew <- raster("D:/Documents/ArcGIS/fundy/backscatter/claire/snapped/by_ben/working/matthew07_0809_mean.tif")
creed <- raster("D:/Documents/ArcGIS/fundy/backscatter/claire/snapped/by_ben/working/creed06_0708_mean.tif")
bathy <- raster("D:/Documents/ArcGIS/fundy/backscatter/claire/snapped/for_ben/Snapped Rasters/Bathymetry_50m.tif")
system.time(
bs <- bulkshift(creed, matthew, bathy, mosaic=TRUE, err.plots = FALSE, dist.plots = FALSE)
)
library(terra)
library(randomForest)
library(party)
library(dismo)
back <- rast("D:/Documents/ArcGIS/fundy/backscatter/claire/snapped/by_ben/final/bof_bshift_50m.tif"); names(back) <- "back"
bathy <- rast('D:/Documents/ArcGIS/fundy/bathy/original_10m/BOF_ALLBath_2010_10m_adj_dodd_gsc_finalc.tif'); names(bathy) <- "bath"
max_v <- rast("D:/Documents/ArcGIS/fundy/oceanography/unb/20m/max_velmag"); names(max_v) <- 'max_v'
mean_v <- rast("D:/Documents/ArcGIS/fundy/oceanography/unb/20m/mean_velmag"); names(mean_v) <- 'mean_v'
prim_stack <- rast(
list(
back,
terra::project(bathy, back),
terra::project(max_v, back),
terra::project(mean_v, back)
)
)
terr_stack <- rast(list.files('D:/Documents/ArcGIS/fundy/terrain/selected', pattern='\\.tif$', full.names=TRUE))
names(terr_stack) <- tools::file_path_sans_ext(list.files('D:/Documents/ArcGIS/fundy/terrain/selected/', pattern='\\.tif$'))
load(file='D:/Documents/ArcGIS/fundy/r_data/pca_lasso_selection_mean.Rdata')
pca <- paste0(
'D:/Documents/ArcGIS/fundy/spatial/pca_rasters/',
selected
)
pc_stack <- rast(pca)
xy <- xyFromCell(back, 1:ncell(back))
long <- rast(back, vals=xy[,1]); names(long) <- 'long'
lat <- rast(back, vals=xy[,2]); names(lat) <- 'lat'
param_stack <- rast(list.files('D:/Documents/ArcGIS/fundy/terrain/params', pattern='\\.tif$', full.names=TRUE))
names(param_stack) <- (tools::file_path_sans_ext(list.files('D:/Documents/ArcGIS/fundy/terrain/params/', pattern='\\.tif$')))
stack <- rast(
list(
prim_stack,
param_stack,
terra::project(terr_stack, prim_stack),
terra::project(pc_stack, prim_stack),
long,
lat
)
)
rm(back, bathy, max_v, mean_v, xy, lat, long)
gsc <- vect("D:/Documents/ArcGIS/fundy/sediments/grabs/individual/gsc_grain_size.shp")
gsc <- project(gsc, stack)
gsc <- cbind(gsc, extract(stack$back, gsc))
gsc <- gsc[!is.na(gsc$back), ]
gsc <- gsc[!(gsc$MEAN == 0 & gsc$STANDARD_D == 0 & gsc$KURTOSIS == 0 & gsc$SKEWNESS == 0), ]
names(gsc)[10:11] <- c("sub_top", "sub_bottom")
gsc <- gsc[gsc$sub_top < 100, ]
gsc <- gsc[ ,'KURTOSIS']
names(gsc) <- 'kurt'
gsc$dset <- "gsc"
#east coast sediment texture database
ecstdb <- vect("D:/Documents/ArcGIS/fundy/sediments/grabs/individual/ecstdb2014.shp")
ecstdb <- project(ecstdb, stack)
ecstdb <- cbind(ecstdb, extract(stack$back, ecstdb))
ecstdb <- ecstdb[!is.na(ecstdb$back), ]
df <- as.data.frame(ecstdb)
df[df == -9999] <- NA
values(ecstdb) <- df
ecstdb <- ecstdb[!is.na(ecstdb$KURTOSIS), ]
ecstdb <- ecstdb[ ,'KURTOSIS']
names(ecstdb) <- 'kurt'
ecstdb$dset <- "ecstdb"
#merge
gs <- rbind(gsc, ecstdb)
#aggregate per grid cell
gs_ras <- rasterize(x=gs, y=stack, field='kurt', fun=mean); names(gs_ras) <- 'sed'
gs_agg <- as.points(gs_ras)
gs_agg <- cbind(gs_agg, extract(stack, gs_agg))
sum(is.na(as.data.frame(gs_agg)))
gs_agg <- gs_agg[complete.cases(as.data.frame(gs_agg)), ]
gs_df <- as.data.frame(gs_agg)
#for all
gs_df <- subset(gs_df, select= -c(ID))
#terrain and spatial
gs_df <- subset(gs_df, select=c('sed', names(prim_stack), names(terr_stack), names(pc_stack)))
write.csv(gs_df, 'D:/Documents/ArcGIS/fundy/python/kurt_df.csv', na="", row.names=FALSE)
?as.Date
View(gs_df)
library(terra)
library(randomForest)
library(party)
library(dismo)
back <- rast("D:/Documents/ArcGIS/fundy/backscatter/claire/snapped/by_ben/final/bof_bshift_50m.tif"); names(back) <- "back"
bathy <- rast('D:/Documents/ArcGIS/fundy/bathy/original_10m/BOF_ALLBath_2010_10m_adj_dodd_gsc_finalc.tif'); names(bathy) <- "bath"
max_v <- rast("D:/Documents/ArcGIS/fundy/oceanography/unb/20m/max_velmag"); names(max_v) <- 'max_v'
mean_v <- rast("D:/Documents/ArcGIS/fundy/oceanography/unb/20m/mean_velmag"); names(mean_v) <- 'mean_v'
prim_stack <- rast(
list(
back,
terra::project(bathy, back),
terra::project(max_v, back),
terra::project(mean_v, back)
)
)
terr_stack <- rast(list.files('D:/Documents/ArcGIS/fundy/terrain/selected', pattern='\\.tif$', full.names=TRUE))
names(terr_stack) <- tools::file_path_sans_ext(list.files('D:/Documents/ArcGIS/fundy/terrain/selected/', pattern='\\.tif$'))
load(file='D:/Documents/ArcGIS/fundy/r_data/pca_lasso_selection_mean.Rdata')
pca <- paste0(
'D:/Documents/ArcGIS/fundy/spatial/pca_rasters/',
selected
)
pc_stack <- rast(pca)
xy <- xyFromCell(back, 1:ncell(back))
long <- rast(back, vals=xy[,1]); names(long) <- 'long'
lat <- rast(back, vals=xy[,2]); names(lat) <- 'lat'
param_stack <- rast(list.files('D:/Documents/ArcGIS/fundy/terrain/params', pattern='\\.tif$', full.names=TRUE))
names(param_stack) <- (tools::file_path_sans_ext(list.files('D:/Documents/ArcGIS/fundy/terrain/params/', pattern='\\.tif$')))
stack <- rast(
list(
prim_stack,
param_stack,
terra::project(terr_stack, prim_stack),
terra::project(pc_stack, prim_stack),
long,
lat
)
)
rm(back, bathy, max_v, mean_v, xy, lat, long)
#gsc
gsc <- vect("D:/Documents/ArcGIS/fundy/sediments/grabs/individual/gsc_grain_size.shp")
gsc <- project(gsc, stack)
gsc <- cbind(gsc, extract(stack$back, gsc))
gsc <- gsc[!is.na(gsc$back), ]
gsc <- gsc[!(gsc$MEAN == 0 & gsc$STANDARD_D == 0 & gsc$KURTOSIS == 0 & gsc$SKEWNESS == 0), ]
names(gsc)[10:11] <- c("sub_top", "sub_bottom")
gsc <- gsc[gsc$sub_top < 100, ]
gsc <- gsc[ ,c(17,18)]
names(gsc) <- c("mean", "sd")
gsc$dset <- "gsc"
us <- vect("D:/Documents/ArcGIS/fundy/sediments/grabs/individual/us_seabed.shp")
us <- project(us, stack)
us <- cbind(us, extract(stack$back, us))
us <- us[!is.na(us$back), ]
df <- as.data.frame(us)
df[df == -9999] <- NA
values(us) <- df
us <- us[!is.na(us$grainsize), ]
us <- us[ ,c('grainsize' ,'sorting')]
names(us) <- c("mean", "sd")
us$dset <- "us"
ecstdb <- vect("D:/Documents/ArcGIS/fundy/sediments/grabs/individual/ecstdb2014.shp")
ecstdb <- project(ecstdb, stack)
ecstdb <- cbind(ecstdb, extract(stack$back, ecstdb))
ecstdb <- ecstdb[!is.na(ecstdb$back), ]
df <- as.data.frame(ecstdb)
df[df == -9999] <- NA
values(ecstdb) <- df
ecstdb <- ecstdb[!is.na(ecstdb$MEAN), ]
ecstdb <- ecstdb[ ,c('MEAN','STDEV')]
names(ecstdb) <- c("mean", "sd")
ecstdb$dset <- "ecstdb"
summary(gsc$sd)
summary(us$sd)
summary(ecstdb$sd)
View(us)
View(values(us))
hist(gsc$sd)
hist(us$sd)
hist(ecstdb$sd)
summary(gsc)
summary(us)
summary(ecstdb)
gsc <- vect("D:/Documents/ArcGIS/fundy/sediments/grabs/individual/gsc_grain_size.shp")
gsc <- project(gsc, stack)
gsc <- cbind(gsc, extract(stack$back, gsc))
gsc <- gsc[!is.na(gsc$back), ]
gsc <- gsc[!(gsc$MEAN == 0 & gsc$STANDARD_D == 0 & gsc$KURTOSIS == 0 & gsc$SKEWNESS == 0), ]
names(gsc)[10:11] <- c("sub_top", "sub_bottom")
gsc <- gsc[gsc$sub_top < 100, ]
gsc <- gsc[ ,'KURTOSIS']
names(gsc) <- 'kurt'
gsc$dset <- "gsc"
#east coast sediment texture database
ecstdb <- vect("D:/Documents/ArcGIS/fundy/sediments/grabs/individual/ecstdb2014.shp")
ecstdb <- project(ecstdb, stack)
ecstdb <- cbind(ecstdb, extract(stack$back, ecstdb))
ecstdb <- ecstdb[!is.na(ecstdb$back), ]
df <- as.data.frame(ecstdb)
df[df == -9999] <- NA
values(ecstdb) <- df
ecstdb <- ecstdb[!is.na(ecstdb$KURTOSIS), ]
ecstdb <- ecstdb[ ,'KURTOSIS']
names(ecstdb) <- 'kurt'
ecstdb$dset <- "ecstdb"
summary(gsc)
summary(us)
summary(ecstdb)
hist(gsc$kurt)
hist(ecstdb$kurt)
gsc <- vect("D:/Documents/ArcGIS/fundy/sediments/grabs/individual/gsc_grain_size.shp")
gsc <- project(gsc, stack)
gsc <- cbind(gsc, extract(stack$back, gsc))
gsc <- gsc[!is.na(gsc$back), ]
gsc <- gsc[!(gsc$MEAN == 0 & gsc$STANDARD_D == 0 & gsc$KURTOSIS == 0 & gsc$SKEWNESS == 0), ]
names(gsc)[10:11] <- c("sub_top", "sub_bottom")
gsc <- gsc[gsc$sub_top < 100, ]
gsc <- gsc[ ,c(17,18)]
names(gsc) <- c("mean", "sd")
gsc$dset <- "gsc"
#geomap app us seabed
us <- vect("D:/Documents/ArcGIS/fundy/sediments/grabs/individual/us_seabed.shp")
us <- project(us, stack)
us <- cbind(us, extract(stack$back, us))
us <- us[!is.na(us$back), ]
df <- as.data.frame(us)
df[df == -9999] <- NA
values(us) <- df
us <- us[!is.na(us$grainsize), ]
us <- us[ ,c('grainsize' ,'sorting')]
names(us) <- c("mean", "sd")
us$dset <- "us"
#east coast sediment texture database
ecstdb <- vect("D:/Documents/ArcGIS/fundy/sediments/grabs/individual/ecstdb2014.shp")
ecstdb <- project(ecstdb, stack)
ecstdb <- cbind(ecstdb, extract(stack$back, ecstdb))
ecstdb <- ecstdb[!is.na(ecstdb$back), ]
df <- as.data.frame(ecstdb)
df[df == -9999] <- NA
values(ecstdb) <- df
ecstdb <- ecstdb[!is.na(ecstdb$MEAN), ]
ecstdb <- ecstdb[ ,c('MEAN','STDEV')]
names(ecstdb) <- c("mean", "sd")
ecstdb$dset <- "ecstdb"
hist(gsc$sd)
hist(ua$sd)
hist(us$sd)
hist(ecstdb$sd)
gsc <- vect("D:/Documents/ArcGIS/fundy/sediments/grabs/individual/gsc_grain_size.shp")
gsc <- project(gsc, stack)
gsc <- cbind(gsc, extract(stack$back, gsc))
gsc <- gsc[!is.na(gsc$back), ]
gsc <- gsc[!(gsc$MEAN == 0 & gsc$STANDARD_D == 0 & gsc$KURTOSIS == 0 & gsc$SKEWNESS == 0), ]
names(gsc)[10:11] <- c("sub_top", "sub_bottom")
gsc <- gsc[gsc$sub_top < 100, ]
gsc <- gsc[ ,'SKEWNESS']
names(gsc) <- 'skew'
gsc$dset <- "gsc"
#east coast sediment texture database
ecstdb <- vect("D:/Documents/ArcGIS/fundy/sediments/grabs/individual/ecstdb2014.shp")
ecstdb <- project(ecstdb, stack)
ecstdb <- cbind(ecstdb, extract(stack$back, ecstdb))
ecstdb <- ecstdb[!is.na(ecstdb$back), ]
df <- as.data.frame(ecstdb)
df[df == -9999] <- NA
values(ecstdb) <- df
ecstdb <- ecstdb[!is.na(ecstdb$SKEWNESS), ]
ecstdb <- ecstdb[ ,'SKEWNESS']
names(ecstdb) <- 'skew'
ecstdb$dset <- "ecstdb"
summary(gsc)
summary(ecstdb)
hist(gsc$skew)
hist(ecstdb$skew)
gsc <- vect("D:/Documents/ArcGIS/fundy/sediments/grabs/individual/gsc_grain_size.shp")
gsc <- project(gsc, stack)
gsc <- cbind(gsc, extract(stack$back, gsc))
gsc <- gsc[!is.na(gsc$back), ]
gsc <- gsc[!(gsc$MEAN == 0 & gsc$STANDARD_D == 0 & gsc$KURTOSIS == 0 & gsc$SKEWNESS == 0), ]
names(gsc)[10:11] <- c("sub_top", "sub_bottom")
gsc <- gsc[gsc$sub_top < 100, ]
gsc <- gsc[ ,c(17,18)]
names(gsc) <- c("mean", "sd")
gsc$dset <- "gsc"
#merge
gs <- gsc
#aggregate per grid cell
gs_ras <- rasterize(x=gs, y=stack, field='sd', fun=mean); names(gs_ras) <- 'sed'
gs_agg <- as.points(gs_ras)
gs_agg <- cbind(gs_agg, extract(stack, gs_agg))
sum(is.na(as.data.frame(gs_agg)))
gs_agg <- gs_agg[complete.cases(as.data.frame(gs_agg)), ]
plot(gs_agg$e_15x15_back, gs_agg$sed)
# models ------------------------------------------------------------------
ve <- function(pred, ref){
1 - (sum((ref - pred)^2) / sum((ref - mean(pred))^2))
}
gs_df <- as.data.frame(gs_agg)
#terrain and spatial
gs_df <- subset(gs_df, select=c('sed', names(prim_stack), names(terr_stack), names(pc_stack)))
stack_sub <- terra::subset(stack, names(gs_df)[-1])
form = as.formula(
paste0(
"sed ~",
paste0("(", names(gs_df)[-1], ")", collapse="+")
)
)
#lm
p <- list()
for(i in 1:nrow(gs_df)){
cat("\r",i)
loo_df <- gs_df[-i, ]
loo <- gs_df[i, ]
model <- lm(form, data=loo_df)
p[[i]] <- predict(model, loo)
}
val <- data.frame(pred=I(do.call(rbind, p)), ref=gs_df$sed)
ve(val$pred, val$ref)
plot(val$pred, val$ref)
model <- lm(form, data=gs_df)
summary(model)
plot(gs_df$sed, predict(model))
#elasticnet
library(glmnet)
ls <- list()
for(i in seq(0,1,0.01)){
cat("\r",i)
lambda <- cv.glmnet(x=as.matrix(gs_df[ ,-1]), y=as.matrix(gs_df$sed), alpha=i)
df <- data.frame(
lambda=lambda$lambda,
cvm=lambda$cvm
)
ls[[length(ls) + 1]] <- data.frame(
alpha=i,
lambda_min=df$cvm[df$lambda == lambda$lambda.min],
lambda_1se=df$cvm[df$lambda == lambda$lambda.1se]
)
}
alpha_cv <- do.call(rbind, ls); alpha_cv
a <- alpha_cv$alpha[which(alpha_cv$lambda_min == min(alpha_cv$lambda_min))]
lambda <- cv.glmnet(x=as.matrix(gs_df[ ,-1]), y=as.matrix(gs_df$sed), alpha=a)
s <- lambda$lambda.min
coef(lambda$glmnet.fit, s=s)
p <- list()
for(i in 1:nrow(gs_df)){
cat("\r",i)
loo_df <- gs_df[-i, ]
loo <- gs_df[i, ]
elastic <- glmnet(x=as.matrix(loo_df[ ,-1]), y=as.matrix(loo_df$sed), alpha=a)
p[[i]] <- predict(elastic, as.matrix(loo[ ,-1]), s=s)
}
val <- data.frame(pred=I(do.call(rbind, p)), ref=gs_df$sed)
val$pred < 0
sum(val$pred < 0)
ve(val$pred, val$ref)
val$pred < 0
val$pred[val$pred < 0] <- 0
ve(val$pred, val$ref)
cor(val$pred, val$ref)
plot(val$pred, val$ref)
elastic <- glmnet(x=as.matrix(gs_df[ ,-1]), y=as.matrix(gs_df$sed), alpha=a, lambda=s)
#select preds using lasso
lambda <- cv.glmnet(x=as.matrix(gs_df[ ,-1]), y=as.matrix(gs_df$sed), alpha=1)
rownames(coef(lambda, s = "lambda.1se"))
selected <- names(coef(lambda)[,'s1'][coef(lambda, s = "lambda.1se")[,'s1'] != 0])
selected <- selected[-1]
#GLM with elasticnet selection
form_lasso = as.formula(
paste0(
"sed ~",
paste0("(", selected, ")", collapse="+")
)
)
p <- list()
for(i in 1:nrow(gs_df)){
cat("\r",i)
loo_df <- gs_df[-i, ]
loo <- gs_df[i, ]
model <- lm(form_lasso, data=loo_df)
p[[i]] <- predict(model, loo)
}
val <- data.frame(pred=I(do.call(rbind, p)), ref=gs_df$sed)
ve(val$pred, val$ref)
cor(val$pred, val$ref)
plot(val$pred, val$ref)
val$pred[val$pred < 0]
val$pred[val$pred < 0] <- 0
ve(val$pred, val$ref)
cor(val$pred, val$ref)
plot(val$pred, val$ref)
us <- vect("D:/Documents/ArcGIS/fundy/sediments/grabs/individual/us_seabed.shp")
us <- project(us, stack)
us <- cbind(us, extract(stack$back, us))
us <- us[!is.na(us$back), ]
df <- as.data.frame(us)
df[df == -9999] <- NA
values(us) <- df
us <- us[!is.na(us$grainsize), ]
us <- us[ ,c('grainsize' ,'sorting')]
names(us) <- c("mean", "sd")
us$dset <- "us"
#east coast sediment texture database
ecstdb <- vect("D:/Documents/ArcGIS/fundy/sediments/grabs/individual/ecstdb2014.shp")
ecstdb <- project(ecstdb, stack)
ecstdb <- cbind(ecstdb, extract(stack$back, ecstdb))
ecstdb <- ecstdb[!is.na(ecstdb$back), ]
df <- as.data.frame(ecstdb)
df[df == -9999] <- NA
values(ecstdb) <- df
ecstdb <- ecstdb[!is.na(ecstdb$MEAN), ]
ecstdb <- ecstdb[ ,c('MEAN','STDEV')]
names(ecstdb) <- c("mean", "sd")
ecstdb$dset <- "ecstdb"
summary(gsc$sd)
summary(us$sd)
summary(ecstdb$sd)
gc()
remove.packages("terra", lib="~/R/win-library/4.1")
remove.packages("MultiscaleDEM", lib="~/R/win-library/4.1")
remove.packages("remotes", lib="~/R/win-library/4.1")
remotes::install_github("ailich/MultiscaleDTM")
library(remotes)
remotes::install_github("benjaminmisiuk/bulkshift")
install.pachages("remotes")
install.packages("remotes")
remotes::install_github("benjaminmisiuk/bulkshift")
library(bulkshift)
getwd()
bb2016 <- rast(system.file('extdata', 'bb2016.tif', package='bulkshift'))
library(terra)
bb2016 <- rast(system.file('extdata', 'bb2016.tif', package='bulkshift'))
bb2017 <- rast(system.file('extdata', 'bb2017.tif', package='bulkshift'))
bbdepth <- rast(system.file('extdata', 'bbdepth.tif', package='bulkshift'))
b <- bulkshift(shift = bb2017, target = bb2016)
b
b$errorModel
plot(b$shifted)
plot(bb2016_raster)
plot(bb2016)
plot(b$shifted)
plot(bb2016, add = TRUE)
plot(c(bb2016, bb2017))
plot(list(bb2016, bb2017))
plot(bb2016, bb2017)
terra::plot()
terra::plot
??terra::plot
?terra::plot
par(mfrow=c(1,2))
par(mfrow=c(1,2))
plot(bb2016)
plot(bb2017)
dev.off()
dev.off()
par(mfrow=c(1,2))
plot(bb2016)
plot(bb2017)
?rev
grDevices::gray.colors(50)
?par
gray.colors(50)
par(mfrow=c(1,2))
plot(bb2016, col = gray.colors(50))
plot(bb2017, col = gray.colors(50))
par(mfrow=c(1,2))
plot(bb2016, col = gray.colors(100))
plot(bb2017, col = gray.colors(100))
bb2016
dev.off()
plot(bb2016)
par(mfrow=c(2,1))
plot(bb2016, col = gray.colors(100))
plot(bb2017, col = gray.colors(100))
dev.off()
plot(bb2016, col = gray.colors(100))
plot(bb2017, col = gray.colors(100), add = TRUE)
par(mfrow=c(2,1))
plot(bb2016, col = gray.colors(100))
b$errorModel
?dev.off
dev.off()
plot(b$shifted)
plot(b$shifted, col = gray.colors(100))
bshift <- bulkshift(shift = bb2017, target = bb2016, preds = bbdepth, mosaic = TRUE)
b <- bulkshift(shift = bb2017, target = bb2016, preds = bbdepth, mosaic = TRUE)
plot(b$mosaic)
plot(b$mosaic, col = gray.colors(100))
plot(mosaic(bb2016, bb2017))
plot(mosaic(bb2016, bb2017), col = gray.colors(100))
b <- bulkshift(shift = bb2017, target = bb2016, preds = bbdepth, mosaic = TRUE, method = "randomForest", ntree = 250)
b <- bulkshift(shift = bb2017, target = bb2016, preds = bbdepth, mosaic = TRUE, model = "randomForest", ntree = 250)
b$errorModel
?bulkshift
b <- bulkshift(shift = bb2017, target = bb2016, preds = bbdepth, mosaic = TRUE, sample = 0.5, samplemethods = "autocorrelation")
b$data
summary(b$data)
nrow(b$data)
?randomForest
setwd('D:/Documents/GitHub/bulkshift')
